{"version":3,"sources":["components/CardComponent/Card.jsx","components/CardListComponent/CardList.jsx","components/SearchBarComponent/SearchBox.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["Card","state","className","this","props","country","cases","todaysCases","deaths","todaysDeaths","recovered","critical","Component","CardList","countries","cardComponent","map","i","key","todayCases","todayDeaths","SearchBox","type","placeholder","onChange","onSearchChange","App","searchfield","handleOnSearchChange","event","setState","target","value","document","title","fetch","then","data","json","results","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wTAwBeA,G,wNApBbC,MAAQ,G,uDAEN,OACE,yBAAKC,UAAU,yCACb,wBAAIA,UAAU,oDACXC,KAAKC,MAAMC,SAEd,yBAAKH,UAAU,uBACb,uBAAGA,UAAU,4BAA4B,UAAYC,KAAKC,MAAME,OAChE,uBAAGJ,UAAU,4BAA4B,iBAAmBC,KAAKC,MAAMG,aACvE,uBAAGL,UAAU,4BAA4B,WAAaC,KAAKC,MAAMI,QACjE,uBAAGN,UAAU,4BAA4B,kBAAoBC,KAAKC,MAAMK,cACxE,uBAAGP,UAAU,4BAA4B,cAAgBC,KAAKC,MAAMM,WACpE,uBAAGR,UAAU,4BAA4B,aAAeC,KAAKC,MAAMO,gB,GAd1DC,cCoBJC,G,MAnBE,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACZC,EAAgBD,EAAUE,KAAI,SAACX,EAASY,GAC5C,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLZ,QAASS,EAAUG,GAAGZ,QACtBC,MAAOQ,EAAUG,GAAGX,MACpBC,YAAaO,EAAUG,GAAGE,WAC1BX,OAAQM,EAAUG,GAAGT,OACrBC,aAAcK,EAAUG,GAAGG,YAC3BV,UAAWI,EAAUG,GAAGP,UACxBC,SAAUG,EAAUG,GAAGN,cAK7B,OAAO,yBAAKT,UAAU,YAAYa,KCDrBM,G,kNAfbpB,MAAQ,G,uDAEN,OACE,yBAAKC,UAAU,yBACb,2BACEA,UAAU,kCACVoB,KAAK,SACLC,YAAY,mBACZC,SAAUrB,KAAKC,MAAMqB,sB,GATPb,cC4CTc,E,4MAzCbzB,MAAQ,CACNa,UAAW,GACXa,YAAa,I,EAYfC,qBAAuB,SAACC,GACtB,EAAKC,SAAS,CAAEH,YAAaE,EAAME,OAAOC,S,kEAVvB,IAAD,OAClBC,SAASC,MAAQ,eACjBC,MAAM,sDACHC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GACL,EAAKT,SAAS,CAAEhB,UAAWyB,S,+BASvB,IAAD,OAEDC,EAASrC,KAAKF,MAAMa,UAAU0B,QAAO,SAAAnC,GACzC,OACIA,EAAQA,QAAQoC,cAAcC,SAAS,EAAKzC,MAAM0B,YAAYc,kBAIpE,OAAKtC,KAAKF,MAAMa,UAAU6B,OAItB,yBAAKzC,UAAU,OACb,yCACA,kBAAC,EAAD,CAAWuB,eAAgBtB,KAAKyB,uBAChC,kBAAC,EAAD,CAAUd,UAAW0B,KANlB,wBAAItC,UAAU,SAAd,kB,GA7BKU,aCOEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASmB,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7b5eb811.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./card.css\";\r\n\r\nclass Card extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"mw-ns br3 grow ma3 shadow-1 bw5 align\">\r\n        <h1 className=\"f4 bg-near-white br3 br--top black-70 mv0 pv2 tc\">\r\n          {this.props.country}\r\n        </h1>\r\n        <div className=\"b--black-10 pa3 red\">\r\n          <p className=\"f6 f5-ns lh-copy measure\">{\"Cases: \" + this.props.cases}</p>\r\n          <p className=\"f6 f5-ns lh-copy measure\">{\"todays-cases: \" + this.props.todaysCases}</p>\r\n          <p className=\"f6 f5-ns lh-copy measure\">{\"Deaths: \" + this.props.deaths}</p>\r\n          <p className=\"f6 f5-ns lh-copy measure\">{\"Todays-deaths: \" + this.props.todaysDeaths}</p>\r\n          <p className=\"f6 f5-ns lh-copy measure\">{\"Recovered: \" + this.props.recovered}</p>\r\n          <p className=\"f6 f5-ns lh-copy measure\">{\"Critical: \" + this.props.critical}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"../CardComponent/Card\";\r\nimport \"./cardlist.css\";\r\n\r\nconst CardList = ({ countries }) => {\r\n  const cardComponent = countries.map((country, i) => {\r\n    return (\r\n      <Card\r\n        key={i}\r\n        country={countries[i].country}\r\n        cases={countries[i].cases}\r\n        todaysCases={countries[i].todayCases}\r\n        deaths={countries[i].deaths}\r\n        todaysDeaths={countries[i].todayDeaths}\r\n        recovered={countries[i].recovered}\r\n        critical={countries[i].critical}\r\n      />\r\n    );\r\n  });\r\n\r\n  return <div className=\"grid mt5\">{cardComponent}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React, { Component } from \"react\";\r\nimport './searchbox.css';\r\n\r\nclass SearchBox extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"pa2 sticky z-1 mb3 tc\">\r\n        <input\r\n          className=\"pa3 ba b--blue bg-lightest-blue\"\r\n          type=\"search\"\r\n          placeholder=\"Search Countries\"\r\n          onChange={this.props.onSearchChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardList from \"../components/CardListComponent/CardList\";\nimport SearchBox from \"../components/SearchBarComponent/SearchBox\";\n\nclass App extends Component {\n  state = {\n    countries: [],\n    searchfield: \"\",\n  };\n\n  componentDidMount() {\n    document.title = \"Covid-19 App\";\n    fetch(\"https://coronavirus-19-api.herokuapp.com/countries\")\n      .then((data) => data.json())\n      .then((results) => {\n        this.setState({ countries: results });\n      });\n  }\n\n  handleOnSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n  };\n\n\n  render() {\n\n    const filter = this.state.countries.filter(country => {\n      return(          \n          country.country.toLowerCase().includes(this.state.searchfield.toLowerCase())\n      );\n    });\n\n    if (!this.state.countries.length) {\n      return <h1 className=\"tc f1\">Loading...</h1>;\n    } else {\n      return (\n        <div className=\"App\">\n          <title>my-app</title>\n          <SearchBox onSearchChange={this.handleOnSearchChange} />\n          <CardList countries={filter} />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}